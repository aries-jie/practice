dataSources:
  # 订单 orders 数据源配置 00
  ds-orders-0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
    driverClassName: com.mysql.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3306/orders_0?useSSL=false&useUnicode=true&characterEncoding=UTF-8
    username: root
    password: root
  # 订单 orders 数据源配置 01
  ds-orders-1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
    driverClassName: com.mysql.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3306/orders_1?useSSL=false&useUnicode=true&characterEncoding=UTF-8
    username: root
    password: root

rules:
  - !SHARDING
    tables: # 数据分片规则配置
      <logic_table_name> (+): # 逻辑表名称
        actualDataNodes (?): # 由数据源名 + 表名组成（参考 Inline 语法规则）
        databaseStrategy (?): # 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
          standard: # 用于单分片键的标准分片场景
            shardingColumn: # 分片列名称
            shardingAlgorithmName: # 分片算法名称
          complex: # 用于多分片键的复合分片场景
            shardingColumns: # 分片列名称，多个列以逗号分隔
            shardingAlgorithmName: # 分片算法名称
          hint: # Hint 分片策略
            shardingAlgorithmName: # 分片算法名称
          none: # 不分片
        tableStrategy: # 分表策略，同分库策略
        keyGenerateStrategy: # 分布式序列策略
          column: # 自增列名称，缺省表示不使用自增主键生成器
          keyGeneratorName: # 分布式序列算法名称
        auditStrategy: # 分片审计策略
          auditorNames: # 分片审计算法名称
            - <auditor_name>
            - <auditor_name>
          allowHintDisable: true # 是否禁用分片审计hint
    autoTables: # 自动分片表规则配置
      t_order_auto: # 逻辑表名称
        actualDataSources (?): # 数据源名称
        shardingStrategy: # 切分策略
          standard: # 用于单分片键的标准分片场景
            shardingColumn: # 分片列名称
            shardingAlgorithmName: # 自动分片算法名称
    bindingTables (+): # 绑定表规则列表
      - <logic_table_name_1, logic_table_name_2, ...>
      - <logic_table_name_1, logic_table_name_2, ...>
    defaultDatabaseStrategy: # 默认数据库分片策略
    defaultTableStrategy: # 默认表分片策略
    defaultKeyGenerateStrategy: # 默认的分布式序列策略
    defaultShardingColumn: # 默认分片列名称

    # 分片算法配置
    shardingAlgorithms:
      <sharding_algorithm_name> (+): # 分片算法名称
        type: # 分片算法类型
        props: # 分片算法属性配置
        # ...

    # 分布式序列算法配置
    keyGenerators:
      <key_generate_algorithm_name> (+): # 分布式序列算法名称
        type: # 分布式序列算法类型
        props: # 分布式序列算法属性配置
        # ...
    # 分片审计算法配置
    auditors:
      <sharding_audit_algorithm_name> (+): # 分片审计算法名称
        type: # 分片审计算法类型
        props: # 分片审计算法属性配置
        # ...

  - !SINGLE
    tables:
      - ds-orders-0.order_config # 加载指定单表
    defaultDataSource: ds-orders-0 # 默认数据源，仅在执行 CREATE TABLE 创建单表时有效。缺失值为空，表示随机单播路由。


spring:
  # ShardingSphere 配置项
  shardingsphere:
    # 分片规则
    sharding:
      tables:
        # orders 表配置
        orders:
          actualDataNodes: ds-orders-0.orders_$->{[0,2,4,6]}, ds-orders-1.orders_$->{[1,3,5,7]} # 映射到 ds-orders-0 和 ds-orders-1 数据源的 orders 表们
          key-generator: # 主键生成策略
            column: id
            type: SNOWFLAKE
          database-strategy:
            inline:
              algorithm-expression: ds-orders-$->{user_id % 2}
              sharding-column: user_id
          table-strategy:
            inline:
              algorithm-expression: orders_$->{user_id % 8}
              sharding-column: user_id
        # order_config 表配置
        order_config:
          actualDataNodes: ds-orders-0.order_config # 仅映射到 ds-orders-0 数据源的 order_config 表
    # 拓展属性配置
    props:
      sql:
        show: true # 打印 SQL

# mybatis 配置内容
mybatis:
  config-location: classpath:mybatis-config.xml # 配置 MyBatis 配置文件路径
  mapper-locations: classpath:mapper/*.xml # 配置 Mapper XML 地址
  type-aliases-package: com.aries.sharding.dataobject # 配置数据库实体包路径